
steps:
  - ask: # ask -> prompt | prompt -> phrase
    key: "answer"
    prompt: "The most damaging phrase in the language is?"

  - ask:
    key: "caption"
    prompt: "Who did say that?"

  - ask:
    key: "configClass"
    prompt: "Give the config class a name: "

  - read:
    file: test/variable_files/secrets.yaml

  - javascript:
    run: | # Creates a snake case version of [configClass]
      autobot.variables.configClassSnakeCase = autobot.variables.configClass.split(/(?=[A-Z])/).join('_').toLowerCase();

  - javascript:
    run: | # Sets the type flags of the key-value pairs in build_config map
      for (let i = 0; i < autobot.variables.build_config.length; i++) {
        var field = autobot.variables.build_config[i]
        field.isString = (typeof field.value === 'string')
        field.isBool = (typeof field.value == "boolean")
        field.isNum = (!field.isString && !field.isBool)
      }

  - write:
    file: quote.txt
    writeMethod: replaceExistingFile
    content: “The most damaging phrase in the language is.. {{answer}}” - {{caption}}

  - write:
    file: "{{configClassSnakeCase}}.dart"
    writeMethod: replaceExistingFile
    content: |
      class {{configClass}} {
        {{#build_config}}
          {{#isString}}
        static const String {{key}} = '{{{value}}}';
          {{/isString}}
          {{#isBool}}
        static const bool {{key}} = {{value}};
          {{/isBool}}
          {{#isNum}}
        static const double {{key}} = {{value}};
          {{/isNum}}
        {{/build_config}}
      }

  - write:
    file: hidden1.txt
    enabled: n
    content: -- empty --

  - write:
    file: hidden2.txt
    enabled: no
    content: -- empty --

  - write:
    file: hidden3.txt
    enabled: false
    content: -- empty --
